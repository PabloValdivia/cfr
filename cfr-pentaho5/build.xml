<!--===========================================================================
  This is the build file for the Community Dashboard Framework Plugin project.

  This build file will use the common_build.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See common_build.xml for more details
============================================================================-->
<project name="Community File Repository" basedir="." default="jar"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the CFR project
    and works with the common_build.xml file.
  </description>

  <property file="../override.properties"
            description="Top level Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="../build.properties"
            description="Top level Properties customized for your particular project belong in this file." />


  <!-- Import subfloor.xml which contains all the default tasks -->
  <import file="../build-res/subfloor-pkg.xml"/>
  <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN common_build.xml.
    -->

  <!--
    <target name='dist-solution'>
      <copy todir="${solution.stage.dir}" overwrite='true'>
        <fileset dir='solution'>
        <include name=''>
      </copy>
    </target>
  -->

  <property name="plugin.name"        value="cfr"                         description="Name of the plugin"/>
  <property name="core.dir"           value="../cfr-core"                 description="Name of core dir"/>
  <property name="pentaho-base.dir"   value="../cfr-pentaho-base"         description="Name of pentaho base dir"/>
  <property name="resource.dir"       value="resources"                   description="Name of the resource directory"/>
  <property name="core-resource.dir"  value="${core.dir}/${resource.dir}" description="Name of the core resource directory"/>
  <property name="stage.dir"          value="${bin.dir}/stage"            description="Name of the resource directory"/>
  <property name="samples.stage.dir"  value="${bin.dir}/stage-samples"    description="Name of the resource directory" />
  <property name="runtimelib.dir"     value="${basedir}/runtime-lib"
            description="Directory that hosts Jar files required to run project source.  (IVY will populate this directory with required jars)" />

  <tstamp/>

  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${runtimelib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>



  <target name="dist" depends="clean,resolve,jar,cobertura, dist-plugin"/>
  <target name="dist-compile" depends="jar,dist-plugin"/>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${project.revision}.zip"/>
  <property name="plugin.samples.zipfile" value="${plugin.artifact.id}-samples-${project.revision}.zip"/>
  <property name="plugin.solution.zipfile" value="${plugin.artifact.id}-solution-${project.revision}.zip"/>


  <!--=======================================================================
              dist

              Creates a distribution of this project's plugin zip
              ====================================================================-->
  <target name="assemble" depends="assemble.init,install-antcontrib, dist-plugin"/>

  <target name="dist-plugin" depends="jar" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}/lib"/>

    <!-- copy the plugin jar to the plugin dist lib folder -->
    <copy todir="${stage.dir}/${plugin.name}/lib" overwrite="true">
      <fileset dir="${dist.dir}">
        <include name="${ivy.artifact.id}-${project.revision}.jar"/>
      </fileset>

	  <!-- UNCOMMENT THIS LINE AND DELETE ORIENT FROM RUNTIME-LIB ONCE WE'RE ABLE TO UPGRADE TO LATEST VERSION -->
      <!--fileset dir="${lib.dir}">
        <include name="orient*.jar"/>
      </fileset-->
      <fileset dir="runtime-lib">
        <include name="*.jar"/>
      </fileset>
      <fileset dir="${devlib.dir}">
        <include name="**/*.jar"/>
      </fileset>

    </copy>

    <!-- Copy core resources -->
    <copy todir='${stage.dir}/${plugin.name}'>
        <fileset dir='${core-resource.dir}'>
            <include name="**/*"/>
        </fileset>
    </copy>

    <!-- Copy the plugin.xml and any other files from the resource dir -->
    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${resource.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${stage.dir}/${plugin.name}" overwrite="true">
      <fileset dir="${basedir}">
        <include name="readme.txt"/>
      </fileset>
    </copy>

    <!-- create the version file -->
    <echo file="${stage.dir}/${plugin.name}/VERSION.txt">${project.revision}</echo>
        <echo file="${stage.dir}/${plugin.name}/version.xml" message="&lt;version branch='${project.stage}'  buildId='${sequential.build.id}'>${project.revision}&lt;/version>"/>



    <echo file="${dist.dir}/marketplace.xml">      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${project.revision}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url}
        &lt;/package_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version}&lt;/min_parent_version&gt;
        &lt;max_parent_version&gt;${marketplace.metadata.max_parent_version}&lt;/max_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
        &lt;/development_stage&gt;
      &lt;/version&gt;</echo>



    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="${plugin.name}/**/*"
         excludes="**/Thumbs.db"/>

    <copy tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" file="${dist.dir}/${plugin.zipfile}"/>
  </target>

  <!--=======================================================================
              dist-samples

              Creates a distribution of this project's samples
              ====================================================================-->
  <target name="dist-samples" depends="init">

    <mkdir dir="${samples.stage.dir}"/>

    <!-- copy over all the xactions within the cdf-samples folder -->
    <copy todir="${samples.stage.dir}/bi-developers" overwrite="true" >
      <fileset dir="solution/bi-developers"></fileset>
    </copy>

    <zip zipfile="${dist.dir}/${plugin.samples.zipfile}"
         basedir="${samples.stage.dir}"
         includes="**/*"
         excludes="**/Thumbs.db"
        />
  </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="dist" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <!-- Copy samples -->
    <!--copy todir="${plugin.local.install.solutions.dir}/">
      <fileset dir="${samples.stage.dir}/">
        <include name="**/*" />
      </fileset>
    </copy-->

  </target>

  <!--=======================================================================
          publish-pentaho-nojar (override)

          Publishes the jar and plugin zip package to the Maven repository
          ====================================================================-->
  <target name="publish-nojar"
          depends="install-antcontrib,create-pom,ivy.deliver">
    <ant antfile="../build-res/subfloor.xml" target="publish-nojar"/>

    <ivy:makepom ivyfile="package-ivy.xml" pomfile="plugin-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="samples-pom.xml"/>
    <ivy:makepom ivyfile="package-ivy.xml" pomfile="solution-pom.xml"/>

    <replace file="plugin-pom.xml" token="jar" value="zip"/>
    <replace file="plugin-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}"/>
    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${plugin.zipfile}"/>
    </antcall>

    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="plugin-pom.xml"/>
      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip"/>
    </antcall>

    <if>
      <available file="${dist.dir}/${plugin.samples.zipfile}" />
      <then>
        <replace file="samples-pom.xml" token="jar" value="zip"/>
        <replace file="samples-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-samples"/>
        <antcall target="maven-publish-artifact">
          <param name="publish.pomFile" value="samples-pom.xml"/>
          <param name="publish.file" value="${dist.dir}/${plugin.samples.zipfile}"/>
        </antcall>
      </then>
    </if>
    <if>
      <available file="${dist.dir}/${plugin.solution.zipfile}" />
      <then>
        <replace file="solution-pom.xml" token="jar" value="zip"/>
        <replace file="solution-pom.xml" token="%artifact-name%" value="${plugin.artifact.id}-solution"/>
        <antcall target="maven-publish-artifact">
          <param name="publish.pomFile" value="solution-pom.xml"/>
          <param name="publish.file" value="${dist.dir}/${plugin.solution.zipfile}"/>
        </antcall>
      </then>
    </if>
  </target>

  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="runtime-lib/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="clean-jars">
    <delete dir="${lib.dir}" />
    <delete dir="${testlib.dir}" />
    <delete dir="${runtimelib.dir}" />
  </target>

    <target name="compile.compile" depends="init" description="Performs the actual javac compile">
    <javac destdir="${classes.dir}"
           debug="${javac.debug}"
           deprecation="${javac.deprecation}"
           fork="true"
           source="${javac.source}"
           target="${javac.target}">
        <classpath>
            <path refid="classpath"/>
        </classpath>
        <src path="${src.dir}"/>
        <src path="${pentaho-base.dir}/src" />
    </javac>
  </target>

  <target name="compile-tests" depends="init-tests">
    <javac destdir="${testclasses.dir}" debug="true" optimize="false" source="${javac.source}" target="${javac.target}" fork="true">
      <src path="${testsrc.dir}" />
      <src path="${pentaho-base.dir}/test-src" />
      <classpath refid="test.classpath" />
    </javac>
    <!-- Copy the non-java files from the source directory to the test classes directory
-->
    <copy todir="${testclasses.dir}">
      <fileset dir="${testsrc.dir}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    <copy todir="${testclasses.dir}">
      <fileset dir="${pentaho-base.dir}/test-src">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
  </target>
  
  <target name="test" depends="compile,compile-tests, init-test-reports" description="Compiles and runs unit tests">
    <junit maxmemory="${junit.maxmemory}" fork="yes" failureProperty="test.failed" haltonfailure="${junit.haltonfailure}" printsummary="yes">
      <sysproperty key="java.awt.headless" value="${headless.unittest}" />
      <classpath refid="test.classpath" />
      <formatter type="xml" />
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase" />
      <batchtest fork="yes" todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
          <include name="**/*Test.java" />
        </fileset>
        <fileset dir="${pentaho-base.dir}/test-src" casesensitive="yes">
          <include name="**/*Test.java" />
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${testreports.html.dir}" />
    </junitreport>
  </target>


 <target name="cobertura.test-instrumented"
          depends="init-test-reports,install-cobertura,compile,compile-tests,cobertura.instrument-classes">
    <mkdir dir="${instrumented.classes.dir}" />
    <path id="cobertura.classpath">
      <fileset dir="${subfloor.resources.dir}/cobertura-1.9.4.1">
        <include name="*.jar" />
      </fileset>
    </path>
    <junit fork="yes"
           maxmemory="${junit.maxmemory}"
           failureProperty="test.failed"
           haltonfailure="${junit.haltonfailure}">
      <sysproperty key="java.awt.headless" value="${headless.unittest}" />

      <!-- Specify the name of the coverage data file to use. -->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser" />

      <!--
        Note the classpath order: instrumented classes are before the
        original (uninstrumented) classes.  This is important.
      -->
      <classpath location="${instrumented.classes.dir}" />
      <classpath location="${classes.dir}" />
      <classpath location="${testclasses.dir}" />
      <classpath refid="test.classpath" />
      <classpath refid="cobertura.classpath" />

      <formatter type="xml" />
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase" />
      <batchtest todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="${testsrc.dir}" casesensitive="yes">
            <include name="**/*Test.java" />
        </fileset>
         <fileset dir="${pentaho-base.dir}/test-src" casesensitive="yes">
            <include name="**/*Test.java" />
        </fileset>        
      </batchtest>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml" />
      </fileset>
      <report format="frames" todir="${testreports.html.dir}" />
    </junitreport>
  </target>




</project>
